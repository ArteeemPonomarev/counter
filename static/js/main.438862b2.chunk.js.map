{"version":3,"sources":["Counter/Display/Display.module.css","Counter/Button/Button.module.css","Counter/Counter/Counter.module.css","Counter/SettingItem/SettingItem.module.css","Counter/InputSet/InputSet.module.css","Counter/StyledElements/StyledElements.jsx","Counter/Display/Display.tsx","Counter/Button/Button.tsx","store/reducer.js","Counter/CounterItem/CounterItem.jsx","Counter/InputSet/InputSet.tsx","Counter/SettingItem/SettingItem.jsx","Counter/Counter/Counter.jsx","serviceWorker.js","store/store.js","index.js"],"names":["module","exports","BlockBorder","styled","div","ButtonsBlock","DisplayBlock","Display","render","classForErrorMessage","props","isErrorMessage","className","style","classForStop","isSeted","value","values","React","Component","Button","button","classForDis","onClick","onIncClick","disabled","children","InitialState","settedMaxValue","settedMinValue","isSetted","CounterItem","isDisabledInc","isDisabledRes","classForDisInc","classForDisRes","classForSetted","isErrorMax","isErrorMin","classForSeted","incValue","resValue","connect","state","counter","dispatch","type","InputSet","classForDisabled","isError","title","data-title","onClickChange","onChange","onChangeFunc","SettingItem","onSettedValueChange","e","property","target","dataset","changeSettedValue","currentTarget","classForSetBtn","deactivateSetMode","setValues","Counter","wrapper","Boolean","window","location","hostname","match","rootReducer","combineReducers","action","store","createStore","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.438862b2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"stopCount\":\"Display_stopCount__30eIL\",\"settedClass\":\"Display_settedClass__3LVOp\",\"errorMessage\":\"Display_errorMessage__1mCm7\",\"values\":\"Display_values__16Dea\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__QW82y\",\"disabled\":\"Button_disabled__1gYaI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Counter_wrapper__3t3dn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"values\":\"SettingItem_values__3IVKP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"disabled\":\"InputSet_disabled__1rSx_\"};","import styled from 'styled-components';\r\n\r\nexport const BlockBorder = styled.div`\r\n    margin: 0 auto;\r\n    margin-top: 200px;\r\n    border: 2px solid #1BD1ED;\r\n    border-radius: 10px;\r\n    width: 400px;\r\n    height: 300px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: space-around;\r\n    align-items: center;\r\n    `;\r\nexport const ButtonsBlock = styled.div`\r\n    border: 2px solid #1BD1ED;\r\n    border-radius: 10px;\r\n    width: 90%;\r\n    height: 30%;\r\n    display: flex;\r\n    justify-content: space-around;\r\n    align-items: center;\r\n`;\r\n\r\nexport const DisplayBlock = styled.div`\r\n    border: 2px solid #1BD1ED;\r\n    border-radius: 10px;\r\n    width: 90%;\r\n    height: 50%;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    color: #1BD1ED;\r\n    font-size: 60px;\r\n    font-weight: 700;\r\n`;","import React from 'react';\r\nimport style from \"./Display.module.css\";\r\nimport {DisplayBlock} from \"../StyledElements/StyledElements\";\r\n\r\ntype PropsType = {\r\n    isErrorMessage: boolean\r\n    classForStop: string\r\n    isSeted: boolean\r\n    value: string\r\n\r\n}\r\n\r\nclass Display extends React.Component<PropsType> {\r\n    render = () => {\r\n\r\n        const classForErrorMessage = this.props.isErrorMessage ? 'errorMessage' : '';\r\n\r\n        return (\r\n            <DisplayBlock>\r\n            <div className={`${style[this.props.classForStop]}  ${style[classForErrorMessage]}`}>\r\n                {!this.props.isSeted ?\r\n                    this.props.isErrorMessage ? 'Incorrect value' : <span className={style.values}>enter values and press 'set'</span>\r\n                    : this.props.value }\r\n            </div>\r\n            </DisplayBlock>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Display;","import React from 'react';\r\nimport style from './Button.module.css'\r\n\r\ntype PropsType = {\r\n    classForDis: string\r\n    onIncClick: () => void\r\n    disabled: boolean\r\n}\r\n\r\ntype StateType ={}\r\n\r\nclass Button extends React.Component<PropsType, StateType> {\r\n    render = () => {\r\n        return (\r\n            <button className={`${style.button} ${style[this.props.classForDis]}`}\r\n                    onClick={this.props.onIncClick}\r\n                    disabled={this.props.disabled}>\r\n                {this.props.children}\r\n            </button>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Button;","const INC_VAL = 'INC_VAL';\r\nconst RES_VAL = 'RES_VAL';\r\nconst DEACTIVATE_SET_MODE = 'DEACTIVATE_SET_MODE';\r\nconst SET_VALUES = 'SET_VALUES';\r\nconst SET_MIN_OR_MAX_VALUE = 'SET_MIN_OR_MAX_VALUE'\r\n\r\n\r\nconst InitialState = {\r\n    settedMaxValue: 5,\r\n    settedMinValue: 0,\r\n    value: 0,\r\n    isSetted: true,\r\n}\r\n\r\nexport const reducer = (state = InitialState, action) => {\r\n    switch (action.type) {\r\n        case INC_VAL:\r\n            return {\r\n                ...state,\r\n                value: state.value + 1\r\n            }\r\n        case RES_VAL:\r\n            return {\r\n                ...state,\r\n                value: state.settedMinValue\r\n            }\r\n        case DEACTIVATE_SET_MODE:\r\n            return {\r\n                ...state,\r\n                isSetted: false\r\n            }\r\n        case SET_VALUES:\r\n            return {\r\n                ...state,\r\n                value: state.settedMinValue,\r\n                isSetted: true\r\n            }\r\n        case SET_MIN_OR_MAX_VALUE:\r\n            return {\r\n                ...state,\r\n                [action.title]: action.value > state[action.title] ? state[action.title] + 1 : state[action.title] - 1,\r\n                isSetted: false\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const incCurrentValue = () => {\r\n    return { type: INC_VAL }\r\n}\r\n\r\nexport const resCurrentValue = () => {\r\n    return { type: RES_VAL }\r\n}\r\nexport const deactivateSetMode = () => {\r\n    return { type: DEACTIVATE_SET_MODE }\r\n}\r\nexport const setValues = () => {\r\n    return { type: SET_VALUES}\r\n}\r\n\r\nexport const changeSettedValue = (title, value) => {\r\n    return { type: SET_MIN_OR_MAX_VALUE, title, value }\r\n}\r\n","import React from 'react';\r\nimport Display from \"../Display/Display.tsx\";\r\nimport Button from \"../Button/Button\";\r\nimport {BlockBorder, ButtonsBlock} from \"../StyledElements/StyledElements\";\r\nimport {incCurrentValue, resCurrentValue} from \"../../store/reducer\";\r\nimport {connect} from 'react-redux';\r\n\r\n\r\nclass CounterItem extends React.Component {\r\n\r\n\r\n    render = () => {\r\n\r\n        const isDisabledInc = this.props.value === this.props.settedMaxValue;\r\n        const isDisabledRes = this.props.value === this.props.settedMinValue || !this.props.isSetted;\r\n\r\n        const classForDisInc = isDisabledInc || !this.props.isSetted ? 'disabled' : '';\r\n        const classForDisRes = isDisabledRes ? 'disabled' : '';\r\n\r\n        const classForStop = this.props.isSetted && this.props.value === this.props.settedMaxValue ? 'stopCount' : '';\r\n        const classForSetted = !this.props.isSetted ? 'settedClass' : '';\r\n\r\n        const isErrorMax = (this.props.settedMaxValue <= this.props.settedMinValue) || this.props.settedMaxValue < 0\r\n        const isErrorMin = (this.props.settedMaxValue <= this.props.settedMinValue) || this.props.settedMinValue < 0\r\n\r\n        return (\r\n            <BlockBorder>\r\n                <Display value={this.props.value}\r\n                         classForStop={classForStop}\r\n                         classForSeted={classForSetted}\r\n                         isSeted={this.props.isSetted}\r\n                         isErrorMessage={isErrorMin || isErrorMax}/>\r\n                <ButtonsBlock>\r\n                    <Button onIncClick={this.props.incValue}\r\n                            disabled={isDisabledInc}\r\n                            classForDis={classForDisInc}>\r\n                        Inc\r\n                    </Button>\r\n                    <Button onIncClick={this.props.resValue}\r\n                            disabled={isDisabledRes}\r\n                            classForDis={classForDisRes}>\r\n                        Res\r\n                    </Button>\r\n                </ButtonsBlock>\r\n            </BlockBorder>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        settedMaxValue: state.counter.settedMaxValue,\r\n        settedMinValue: state.counter.settedMinValue,\r\n        value: state.counter.value,\r\n        isSetted: state.counter.isSetted\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        incValue: () => {dispatch(incCurrentValue())},\r\n        resValue: () => {dispatch(resCurrentValue())}\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CounterItem);","import React from 'react';\r\nimport style from './InputSet.module.css';\r\n\r\ntype PropsType ={\r\n    isError: boolean\r\n    title: string\r\n    type: string\r\n    value: string\r\n    onClickChange: () => void\r\n    onChangeFunc: () => void\r\n}\r\n\r\n\r\nclass InputSet extends React.Component<PropsType> {\r\n\r\n    render = () => {\r\n\r\n        let classForDisabled = this.props.isError ? 'disabled' : '';\r\n\r\n        return (\r\n            <div>\r\n                {this.props.title} :\r\n                <input type={this.props.type}\r\n                       data-title={this.props.title}\r\n                       className={style[classForDisabled]}\r\n                       value={this.props.value}\r\n                       onClick={this.props.onClickChange}\r\n                       onChange={this.props.onChangeFunc}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default InputSet;","import React from \"react\";\r\nimport style from './SettingItem.module.css'\r\nimport InputSet from \"../InputSet/InputSet.tsx\";\r\nimport Button from \"../Button/Button\";\r\nimport {BlockBorder, ButtonsBlock, DisplayBlock} from \"../StyledElements/StyledElements\";\r\nimport {connect} from 'react-redux';\r\nimport {changeSettedValue, deactivateSetMode, setValues} from \"../../store/reducer\";\r\n\r\n\r\nclass SettingItem extends React.Component {\r\n\r\n    onSettedValueChange = (e) => {\r\n        const title = e.target.dataset.title\r\n        let property;\r\n        if (title === 'maxValue') {\r\n            property = 'settedMaxValue'\r\n        } else {\r\n            property = 'settedMinValue'\r\n        }\r\n        this.props.changeSettedValue(property, e.currentTarget.value)\r\n    }\r\n\r\n\r\n    render = () => {\r\n\r\n        const isErrorMax = (this.props.settedMaxValue <= this.props.settedMinValue) || this.props.settedMaxValue < 0\r\n        const isErrorMin = (this.props.settedMaxValue <= this.props.settedMinValue) || this.props.settedMinValue < 0\r\n\r\n        const classForSetBtn = this.props.isSetted || isErrorMin || isErrorMax ? 'disabled' : '';\r\n\r\n        return (\r\n            <BlockBorder>\r\n                <DisplayBlock>\r\n                    <div className={style.values}>\r\n                        <InputSet title='maxValue'\r\n                                  type='number'\r\n                                  isError={isErrorMax}\r\n                                  value={this.props.settedMaxValue}\r\n                                  onClickChange={this.props.deactivateSetMode}\r\n                                  onChangeFunc={this.onSettedValueChange}/>\r\n\r\n                        <InputSet title='minValue'\r\n                                  type='number'\r\n                                  value={this.props.settedMinValue}\r\n                                  isError={isErrorMin}\r\n                                  onClickChange={this.props.deactivateSetMode}\r\n                                  onChangeFunc={this.onSettedValueChange}/>\r\n                    </div>\r\n                </DisplayBlock>\r\n\r\n                <ButtonsBlock>\r\n                    <Button onIncClick={this.props.setValues}\r\n                            disabled={this.props.isSetted || isErrorMin || isErrorMax}\r\n                            classForDis={classForSetBtn}>\r\n                        Set\r\n                    </Button>\r\n                </ButtonsBlock>\r\n            </BlockBorder>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        settedMaxValue: state.counter.settedMaxValue,\r\n        settedMinValue: state.counter.settedMinValue,\r\n        value: state.counter.value,\r\n        isSetted: state.counter.isSetted\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        deactivateSetMode: () => {\r\n            dispatch(deactivateSetMode())\r\n        },\r\n        setValues: () => {\r\n            dispatch(setValues())\r\n        },\r\n        changeSettedValue: (title, value) => {\r\n            dispatch(changeSettedValue(title, value))\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SettingItem);","import React from 'react';\r\nimport style from './Counter.module.css';\r\nimport CounterItem from \"../CounterItem/CounterItem\";\r\nimport SettingItem from \"../SettingItem/SettingItem\";\r\n\r\n\r\nclass Counter extends React.Component {\r\n\r\n\r\n    render = () => {\r\n        return (\r\n            <div className={style.wrapper}>\r\n                <CounterItem />\r\n                <SettingItem />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default Counter;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {combineReducers, createStore} from 'redux';\r\nimport {reducer} from \"./reducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    counter: reducer\r\n})\r\nconst store = createStore(rootReducer);\r\n\r\nexport default store;\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport Counter from './Counter/Counter/Counter';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from \"react-redux\";\r\nimport store from \"./store/store\";\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <Counter />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}